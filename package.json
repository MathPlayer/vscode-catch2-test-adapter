{
  "name": "vscode-catch2-test-adapter",
  "displayName": "Catch2 and Google Test Explorer",
  "description": "Run your Catch2 and Google Test tests in the Sidebar of Visual Studio Code",
  "icon": "resources/icon.png",
  "author": "Mate Pek",
  "publisher": "matepek",
  "version": "2.4.0",
  "license": "Unlicense",
  "homepage": "https://github.com/matepek/vscode-catch2-test-adapter",
  "repository": {
    "type": "git",
    "url": "https://github.com/matepek/vscode-catch2-test-adapter.git"
  },
  "bugs": {
    "url": "https://github.com/matepek/vscode-catch2-test-adapter/issues"
  },
  "categories": [
    "Other"
  ],
  "keywords": [
    "catch2",
    "googletest",
    "google test",
    "gtest",
    "test",
    "testing",
    "unit test",
    "c++"
  ],
  "main": "out/src/main.js",
  "scripts": {
    "postinstall": "node ./node_modules/vscode/bin/install",
    "reinstall": "rimraf node_modules package-lock.json && npm install",
    "clean": "rimraf out node_modules vscode-catch2-test-adapter-*.vsix",
    "compile": "tsc -p ./tsconfig.json",
    "watch": "tsc -watch -p ./tsconfig.json",
    "rebuild": "npm run clean && npm run build",
    "package": "vsce package",
    "vscode:prepublish": "tsc -p ./tsconfig.json",
    "deploy": "node ./out/test/repo_scripts/deploy.js",
    "test": "node ./out/test/runTests.js"
  },
  "extensionDependencies": [
    "hbenl.vscode-test-explorer"
  ],
  "dependencies": {
    "chokidar": "^2.1.5",
    "debounce-collect": "^1.0.2",
    "entities": "^1.1.2",
    "tslib": "^1.9.3",
    "vscode-test-adapter-api": "^1.7.0",
    "vscode-test-adapter-util": "^0.6.4",
    "xml2js": "^0.4.19"
  },
  "devDependencies": {
    "@types/chai": "^4.1.7",
    "@types/deep-equal": "^1.0.1",
    "@types/entities": "^1.1.1",
    "@types/fs-extra": "^5.0.5",
    "@types/mocha": "^5.2.6",
    "@types/node": "^10.14.4",
    "@types/request-promise": "4.1.42",
    "@types/sinon": "^5.0.7",
    "@types/xml2js": "^0.4.3",
    "@typescript-eslint/eslint-plugin": "^1.5.0",
    "@typescript-eslint/parser": "^1.5.0",
    "deep-equal": "^1.0.1",
    "eslint": "^5.16.0",
    "eslint-config-prettier": "^4.1.0",
    "eslint-plugin-prettier": "^3.0.1",
    "fs-extra": "^7.0.1",
    "mocha-eslint": "^5.0.0",
    "prettier": "^1.16.4",
    "request-promise": "4.2.2",
    "sinon": "^7.3.1",
    "typescript": "^3.4.1",
    "vsce": "^1.59.0",
    "vscode": "1.1.30",
    "vscode-test": "0.1.5"
  },
  "engines": {
    "vscode": "^1.23.0"
  },
  "activationEvents": [
    "onView:test-explorer"
  ],
  "contributes": {
    "configuration": {
      "type": "object",
      "title": "Configuration for the 'Catch2 and Google Test Explorer' extension",
      "$comment": "Enums will cause that the vscode will offer auto-completion.",
      "properties": {
        "catch2TestExplorer.executables": {
          "markdownDescription": "The location of your test executables (relative to the workspace folder or absolute path) and with a lot of other setting. [Details](https://github.com/matepek/vscode-catch2-test-adapter#catch2TestExplorerexecutables)",
          "scope": "resource",
          "default": [
            {
              "name": "${filename}",
              "description": "${relDirpath}/",
              "pattern": "{build,Build,BUILD,out,Out,OUT}/**/*{test,Test,TEST}*",
              "cwd": "${absDirpath}",
              "env": {
                "C2TESTEXECUTABLEPATH": "${absPath}"
              }
            }
          ],
          "oneOf": [
            {
              "type": "array",
              "minItems": 1,
              "items": {
                "oneOf": [
                  {
                    "type": "object",
                    "properties": {
                      "pattern": {
                        "description": "A relative (to workspace directory) or an absolute path or [_glob pattern_](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options). ‚ö†Ô∏è**Avoid backslash!**: üö´`\\`; ‚úÖ`/`; (required)",
                        "anyOf": [
                          {
                            "type": "string",
                            "enum": [
                              "{build,Build,BUILD,out,Out,OUT}/**/*{test,Test,TEST}*",
                              "{build,Build,BUILD,out,Out,OUT}/**/*{test,Test,TEST}*.exe"
                            ]
                          },
                          {
                            "type": "string",
                            "minLength": 1
                          }
                        ]
                      },
                      "name": {
                        "description": "The name of the test suite (file). Can contains variables related to `pattern`.",
                        "anyOf": [
                          {
                            "type": "string",
                            "enum": [
                              "${filename}",
                              "${relPath}",
                              "${absPath}"
                            ]
                          },
                          {
                            "type": "string",
                            "minLength": 1
                          }
                        ]
                      },
                      "description": {
                        "description": "A less prominent text after the `name`. Can contains variables related to `pattern`.",
                        "anyOf": [
                          {
                            "type": "string",
                            "enum": [
                              "${relDirpath}/",
                              "${absDirpath}/"
                            ]
                          },
                          {
                            "type": "string"
                          }
                        ]
                      },
                      "cwd": {
                        "description": "The current working directory for the test executable. If it isn't provided and `defaultCwd` does, then that will be used. Can contains variables related to `pattern`.",
                        "anyOf": [
                          {
                            "type": "string",
                            "enum": [
                              "${absDirpath}",
                              "${relDirpath}",
                              "${workspaceDirectory}",
                              "${workspaceFolder}"
                            ]
                          },
                          {
                            "type": "string",
                            "minLength": 1
                          }
                        ]
                      },
                      "env": {
                        "type": "object",
                        "description": "Environment variables for the test executable. If it isn't provided and `defaultEnv` does, then that will be used. Can contains variables related to `pattern`.",
                        "additionalProperties": {
                          "anyOf": [
                            {
                              "type": "string",
                              "enum": [
                                "${absPath}",
                                "${relPath}",
                                "${absDirpath}",
                                "${relDirpath}",
                                "${filename}",
                                "${baseFilename}",
                                "${extFilename}",
                                "${base2Filename}",
                                "${ext2Filename}",
                                "${base3Filename}",
                                "${ext3Filename}",
                                "${workspaceDirectory}",
                                "${workspaceFolder}",
                                "${workspaceName}",
                                "${name}",
                                "${description}",
                                "${cwd}"
                              ]
                            },
                            {
                              "type": "string",
                              "minLength": 1
                            }
                          ]
                        }
                      },
                      "dependsOn": {
                        "type": "array",
                        "description": "Array of (relative / absolute) _paths_ / [_glob pattern_](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options) (string[]). If a related file is _changed/created/deleted_ and autorun is enabled in \"...\" menu it will run the related executables.",
                        "additionalItems": {
                          "type": "string",
                          "minLength": 1
                        }
                      }
                    },
                    "additionalProperties": false,
                    "required": [
                      "pattern"
                    ]
                  },
                  {
                    "description": "A relative (to workspace directory) or an absolute path or [_glob pattern_](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options). ‚ö†Ô∏è**Avoid backslash!**: üö´`\\`; ‚úÖ`/`; (required)",
                    "type": "string",
                    "minLength": 1
                  }
                ]
              }
            },
            {
              "type": "object",
              "properties": {
                "pattern": {
                  "description": "A relative (to workspace directory) or an absolute path or [_glob pattern_](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options). ‚ö†Ô∏è**Avoid backslash!**: üö´`\\`; ‚úÖ`/`; (required)",
                  "anyOf": [
                    {
                      "type": "string",
                      "enum": [
                        "{build,Build,BUILD,out,Out,OUT}/**/*{test,Test,TEST}*",
                        "{build,Build,BUILD,out,Out,OUT}/**/*{test,Test,TEST}*.exe"
                      ]
                    },
                    {
                      "type": "string",
                      "minLength": 1
                    }
                  ]
                },
                "name": {
                  "description": "The name of the test suite (file). Can contains variables related to `pattern`.",
                  "anyOf": [
                    {
                      "type": "string",
                      "enum": [
                        "${filename}",
                        "${relPath}",
                        "${absPath}"
                      ]
                    },
                    {
                      "type": "string",
                      "minLength": 1
                    }
                  ]
                },
                "description": {
                  "description": "A less prominent text after the `name`. Can contains variables related to `pattern`.",
                  "anyOf": [
                    {
                      "type": "string",
                      "enum": [
                        "${relDirpath}/",
                        "${absDirpath}/"
                      ]
                    },
                    {
                      "type": "string"
                    }
                  ]
                },
                "cwd": {
                  "description": "The current working directory for the test executable. If it isn't provided and `defaultCwd` does, then that will be used. Can contains variables related to `pattern`.",
                  "anyOf": [
                    {
                      "type": "string",
                      "enum": [
                        "${absDirpath}",
                        "${relDirpath}",
                        "${workspaceDirectory}",
                        "${workspaceFolder}"
                      ]
                    },
                    {
                      "type": "string",
                      "minLength": 1
                    }
                  ]
                },
                "env": {
                  "description": "Environment variables for the test executable. If it isn't provided and `defaultEnv` does, then that will be used. Can contains variables related to `pattern`.",
                  "type": "object",
                  "additionalProperties": {
                    "anyOf": [
                      {
                        "type": "string",
                        "enum": [
                          "${absPath}",
                          "${relPath}",
                          "${absDirpath}",
                          "${relDirpath}",
                          "${filename}",
                          "${baseFilename}",
                          "${extFilename}",
                          "${base2Filename}",
                          "${ext2Filename}",
                          "${base3Filename}",
                          "${ext3Filename}",
                          "${workspaceDirectory}",
                          "${workspaceFolder}",
                          "${workspaceName}",
                          "${name}",
                          "${description}",
                          "${cwd}"
                        ]
                      },
                      {
                        "type": "string",
                        "minLength": 1
                      }
                    ]
                  }
                },
                "dependsOn": {
                  "type": "array",
                  "description": "Array of (relative / absolute) _paths_ / [_glob pattern_](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options) (string[]). If a related file is _changed/created/deleted_ and autorun is enabled in \"...\" menu it will run the related executables.",
                  "additionalItems": {
                    "type": "string",
                    "minLength": 1
                  }
                }
              },
              "additionalProperties": false,
              "required": [
                "pattern"
              ]
            },
            {
              "description": "A relative (to workspace directory) or an absolute path or [_glob pattern_](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options). ‚ö†Ô∏è**Avoid backslash!**: üö´`\\`; ‚úÖ`/`; (required)",
              "type": "string",
              "minLength": 1
            }
          ]
        },
        "catch2TestExplorer.defaultCwd": {
          "markdownDescription": "The working directory where the test is run (relative to the workspace folder or absolue path), if it isn't provided in \"executables\". (It resolves variables.)",
          "scope": "resource",
          "type": "string",
          "default": "${absDirpath}",
          "anyOf": [
            {
              "type": "string",
              "enum": [
                "${absDirpath}",
                "${relDirpath}",
                "${workspaceDirectory}",
                "${workspaceFolder}"
              ]
            },
            {
              "type": "string",
              "minLength": 1
            }
          ]
        },
        "catch2TestExplorer.defaultEnv": {
          "markdownDescription": "Environment variables to be set when running the tests. (It resolves variables.)",
          "type": "object",
          "additionalProperties": {
            "anyOf": [
              {
                "type": "string",
                "enum": [
                  "${absPath}",
                  "${relPath}",
                  "${absDirpath}",
                  "${relDirpath}",
                  "${filename}",
                  "${baseFilename}",
                  "${extFilename}",
                  "${base2Filename}",
                  "${ext2Filename}",
                  "${base3Filename}",
                  "${ext3Filename}",
                  "${workspaceDirectory}",
                  "${workspaceFolder}",
                  "${workspaceName}",
                  "${name}",
                  "${description}",
                  "${cwd}"
                ]
              },
              {
                "type": "string",
                "minLength": 1
              }
            ]
          },
          "default": {},
          "scope": "resource"
        },
        "catch2TestExplorer.defaultRngSeed": {
          "markdownDescription": "Shuffles the tests with the given random. Catch2: [--rng-seed (<integer> or 'time')](https://github.com/catchorg/Catch2/blob/master/docs/command-line.md#rng-seed); Google Test: [--gtest_random_seed=<integer>](https://github.com/google/googletest/blob/master/googletest/docs/advanced.md#shuffling-the-tests);",
          "scope": "resource",
          "default": null,
          "oneOf": [
            {
              "type": "integer",
              "minimum": 0
            },
            {
              "type": "null"
            },
            {
              "type": "string",
              "enum": [
                "time"
              ]
            }
          ]
        },
        "catch2TestExplorer.defaultWatchTimeoutSec": {
          "markdownDescription": "Test executables are being watched (only inside the workspace directory). In case of one recompiles it will try to preserve the test states. If compilation reaches timeout it will drop the suite.",
          "scope": "resource",
          "type": "integer",
          "default": 10,
          "minimum": 1
        },
        "catch2TestExplorer.defaultRunningTimeoutSec": {
          "markdownDescription": "Test executable is running in a process. In case of an inifinite loop, it will run forever, unless this parameter is set. It applies instantly. (0 means infinite)",
          "scope": "resource",
          "type": "integer",
          "default": 0,
          "minimum": -1
        },
        "catch2TestExplorer.workerMaxNumber": {
          "markdownDescription": "The variable maximize the number of the parallel test execution. It applies instantly.",
          "scope": "resource",
          "type": "integer",
          "default": 1,
          "minimum": 1
        },
        "catch2TestExplorer.debugConfigTemplate": {
          "markdownDescription": "Set the necessary debug configuraitons and the debug button will work. [Details](https://github.com/matepek/vscode-catch2-test-adapter#catch2TestExplorerdebugConfigTemplate)",
          "scope": "resource",
          "default": null,
          "oneOf": [
            {
              "type": "object",
              "additionalProperties": {
                "anyOf": [
                  {
                    "type": "string",
                    "enum": [
                      "${label}",
                      "${suiteLabel}",
                      "${exec}",
                      "${argsArray}",
                      "${argsStr}",
                      "${cwd}",
                      "${envObj}"
                    ]
                  },
                  {
                    "type": "string",
                    "minLength": 1
                  },
                  {
                    "type": "array"
                  },
                  {
                    "type": "boolean"
                  },
                  {
                    "type": "null"
                  },
                  {
                    "type": "number"
                  },
                  {
                    "type": "object"
                  }
                ]
              }
            },
            {
              "type": "null"
            }
          ]
        },
        "catch2TestExplorer.debugBreakOnFailure": {
          "markdownDescription": "Debugger breaks on failure while debugging the test. Catch2: --break; Google Test: --gtest_break_on_failure;",
          "scope": "resource",
          "type": "boolean",
          "default": true
        },
        "catch2TestExplorer.defaultNoThrow": {
          "markdownDescription": "Skips all assertions that test that an exception is thrown, e.g. REQUIRE_THROWS. This is a Catch2 parameter: --nothrow",
          "scope": "resource",
          "type": "boolean",
          "default": false
        },
        "catch2TestExplorer.logpanel": {
          "markdownDescription": "Creates a new output channel and write the log messages there. For debugging. Enabling it could slow down your vscode.",
          "scope": "resource",
          "type": "boolean",
          "default": false
        },
        "catch2TestExplorer.logfile": {
          "markdownDescription": "Writes the log message into the given file. Empty means disabled.",
          "scope": "resource",
          "type": "string",
          "default": ""
        },
        "catch2TestExplorer.enableTestListCaching": {
          "markdownDescription": "(Experimental) In case your executable took too much time to list the tests, one can set this. It will preserve the output of `--gtest_list_tests --gtest_output=xml:...`. (Beware: Older Google Test doesn't support xml test list format.) (Click [here](http://bit.ly/2HFcAC6), if you think it is a useful feature!)",
          "scope": "resource",
          "type": "boolean",
          "default": false
        }
      }
    }
  }
}
